snippet ed "export default" b
export default $1;$0

snippet ec "export const" b
export const $1;$0

snippet ev "export var" b
export var $1;$0

snippet edv "export default var" b
var $1 = $2;
export default $1;$0

snippet eda "export default var" b
${1|const,let,var|} $2 = ($3) => $4;
export default $2;$0

snippet time "Description" b
console.time($1);
$2
console.timeEnd($1);
$0

snippet me "module.export" b
module.export${1|., = |}$2;

snippet sc "switch" b
switch ($1) {
  case $2: $3;$4
}$0

snippet ls "localStorage" b
localStorage.$0

snippet ss "sessionStorage" b
sessionStorage.$0

snippet dir "console.dir" b
console.dir({ $1 }, { depth: 10 })$0

snippet tc "try catch" b
try {
  $1
} catch (${2:error}) {
  $3
}$0

snippet tf "try finally" b
try {
  $1
} finally {
  $2
}$0

snippet tcf "try catch finally" b
try {
  $1
} catch (${2:error}) {
  $3
} finally {
  $4
}$0

snippet JP "JSON.parse" b
JSON.parse($1)$0

snippet JS "JSON.stringify" b
JSON.stringify($1)$0

snippet imf "import from" b
import ${2:$1} from "$1";$0

snippet imo "import {} from" b
import { $2 } from "$1";$0

snippet if "if"
if ($1) $0

snippet ef "else if ()" b
else if ($1) $0

snippet el "else if ()" b
else $0

snippet reg:email "regex email" b
/(?=^\w[\w_.+-]{0,63}@\w[\w_.-]{0,251}\.[a-zA-Z]{2,8}$)^\w([\w_.+-]{0,1})(\w{1,31}[\w_.+-]{0,1}\w{1,31}){1,21}([_.+-]\w+){0,10}@((\w|\w[\w_.-]\w){1,125}.(\w|\w[\w_.-]\w){1,125}){1,83}$/i

snippet thenlog "then log" b
.then((${1:data}) => (console.dir({ $1 }, { depth: 10 }), $1))
.catch(($1Error) => (console.error({ $1Error }), Promise.reject($1Error)))$0

snippet jsonlog "JSON.stringify(console.log(_))" b
console.log(JSON.stringify($1, null, 2))

snippet thenjsonlog "Description" b
.then(value => console.log(JSON.stringify(value, null, 2)) || value)
$0

snippet cl "class" b
class $1 {
  constructor ($2) {
    $3
  }
}$0

snippet cle "class extends" b
class $1 extends $2 {
  constructor ($3) {
    super($4);
    $5
  }

  $6
}$0

snippet thensavejson "save json" b
.then(value => {
  import("fs").then(fs => fs.promises.writeFile(
    process.cwd() + "/" + "$1.json",
    JSON.stringify(value, null, 2),
    "utf8"
  ))
    .then(() => console.log("saved"))
    .catch((error) => console.log("saved error", error))
	;

	return value;
})$0

snippet c "const " b
const $1 = $2;$0

snippet f "function" b
function $1($2) {
  $3
}$0

snippet af "async function ()" b
async function $1($2) {
  $3
}$0

snippet al "async () =>" b
async ($1) => $0

snippet l "() =>" b
($1) => $0

snippet r "return" b
return $1;

snippet ag "async function*()" b
async function*$1($2) {
  $3
}$0

snippet g "function*()" b
function*$1($2) {
  $3
}$0
