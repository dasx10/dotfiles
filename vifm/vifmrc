colorscheme Default-256 Default
set vicmd=nvim
set syscalls
set confirm-=delete,permdelete
set trash
set history=50
set undolevels=50
set nofollowlinks
set sortnumbers
set number
set relativenumber
set vimhelp
set norunexec
set fastrun

set timefmt=%m/%d\ %H:%M
set wildmenu
set wildstyle=popup
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers
set ignorecase
set smartcase
set nohlsearch
set incsearch
set scrolloff=9
if !has('win')
  set slowfs=curlftpfs
endif

" set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
set statusline="  %t%= %A %10u:%-7g %15E %20d "
" set statusline="%t %f %{GitStatus()}"

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark h ~/
mark b ~/bin/
mark d ~/Downloads/
mark p ~/Картинки/
mark s ~/screens/
mark r ~/screen_record/
mark w ~/work/
mark c ~/.config

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype {*.pdf},<application/pdf> zathura %c %i &, apvlv %c, xpdf %c
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

" PostScript
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" Djvu
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*>
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,
fileviewer {*.mp3},<audio/mpeg> mp3info
fileviewer {*.flac},<audio/flac> soxi

" Video
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]},
         \<video/*> vlc

         " fileviewer {*.avi,wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         " \*.fl[icv],*.m2v,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         " \*.as[fx]},
         " \<video/*>
         " \ ffprobe -pretty %c 2>&1

" Web
filextype {*.html,*.htm},<text/html>
        \ {Open with dwb}
        \ dwb %f %i &,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,

filetype {*.html,*.htm},<text/html> links, lynx

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b



" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,*.tzst},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &

fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,

set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
filter node_modules

" ------------------------------------------------------------------------------

" Sample mappings


" Display sorting dialog
nnoremap S :sort<cr>
nnoremap w :view<cr>
vnoremap w :view<cr>gv
nnoremap gb :file &<cr>l

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw
nnoremap ,t :!kitty &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!nvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>
nnoremap T :tree!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

noremap do jdd

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>
" Swap panes
nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
"" yank current directory path into the clipboard
" Images
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm} kolourpaint
filextype {*.ico,*.webp} feh
filextype {*.exe,*.msi} portproton

fileviewer {*.jpg,*.jpeg,*png,*.webp,*.ico,*.avif}
\ tiv --width=%pw --height=%px %c

fileviewer {*.svg}
  \ echo %c
  \ && tiv --width=%pw --height=%px %c
  \ && identify %c:p
  \ && bat %c:p

fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]},
  \ ffmpeg -i %c -vf fps=1 /tmp/_tmp.png -y > /dev/null 2>&1
  \ || tiv /tmp/_tmp.png --width=%pw --height=%px
  \ || rm /tmp/_tmp.png

fileviewer {*.json}
  \ echo console.log\(JSON.stringify\($(cat '%c'),,null,,2\)\)\; | node

filetype *.ts tsc

fileviewer *.[js],*.[cjs],*.[mjs],*.[ts],*.[tsx],*.[jsx] bat --color always --wrap never --pager never %c -p

nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
vnoremap <C-l> :move<cr>
vnoremap <C-h> :move<cr>

" DELETE
nnoremap d. ggjVGd
nnoremap d0 vggd
nnoremap d$ vGd

nnoremap o :clone<space>


nnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>:echo expand('%"d') "yank to clipboard"<cr>

nnoremap yp :!echo -n %c:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "yank to clipboard"<cr>
nnoremap yf :!echo -n %c | xclip -selection clipboard %i<cr>:echo expand('%"c') "yank to clipboard"<cr>
nnoremap yn :!echo -n %c:r | xclip -selection clipboard %i<cr>:echo expand('%"c:r') "yank to clipboard"<cr>
nnoremap yc :!cat -n %c:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "content yank to clipboard"<cr>

vnoremap yp :!echo -n %f:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "yank to clipboard"<cr>
vnoremap yf :!echo -n %f | xclip -selection clipboard %i<cr>:echo expand('%"c') "yank to clipboard"<cr>
vnoremap yn :!echo -n %f:r | xclip -selection clipboard %i<cr>:echo expand('%"c:r') "yank to clipboard"<cr>
vnoremap yc :!cat -n %f:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "content yank to clipboard"<cr>

nnoremap cd :!mv %d /%c<left><left><left>
vnoremap cd :!mv %d /%c<left><left><left>
nnoremap ch :!ln %f<space>
nnoremap cs :!ln -s %f<space>

nnoremap csp :!bash -c 'target="%c:p"; base="%f:r"; ext=".${target##*.}"; [[ "$target" == "$base" ]] && ext=""; num=1; while [[ -e "${base}_${num}${ext}" || -L "${base}_${num}${ext}" ]]; do ((num++)); done; ln -s "$target" "${base}_${num}${ext}"; echo "symlink created: ${base}_${num}${ext}"' <cr>

nnoremap csf :!bash -c 'target="%c"; base="%f:r"; ext=".${target##*.}"; [[ "$target" == "$base" ]] && ext=""; num=1; while [[ -e "./${base}_${num}${ext}" || -L "./${base}_${num}${ext}" ]]; do ((num++)); done; ln -s "$target" "./${base}_${num}${ext}"; echo "relative symlink created: ./${base}_${num}${ext}"' <cr>

nnoremap chp :!bash -c 'target="%f"; base="%f:r"; ext=".${target##*.}"; [[ "$target" == "$base" ]] && ext=""; num=1; while [[ -e "${base}_${num}${ext}" || -L "${base}_${num}${ext}" ]]; do ((num++)); done; ln "$target" "${base}_${num}${ext}"; echo "symlink created: ${base}_${num}${ext}"' <cr>

nnoremap chf :!bash -c 'target="%f"; base="%f:r"; ext=".${target##*.}"; [[ "$target" == "$base" ]] && ext=""; num=1; while [[ -e "./${base}_${num}${ext}" || -L "./${base}_${num}${ext}" ]]; do ((num++)); done; ln "$target" "./${base}_${num}${ext}"; echo "relative symlink created: ./${base}_${num}${ext}"' <cr>


nnoremap v. ggvG
nnoremap y. ggvG:yank<cr>
nnoremap yh :!ln %f %d/.%c<cr>:delete %d.%c<cr>

vnoremap e :!nvim -d %f<cr>

" IMAGE
nnoremap <space>ciA :!convert %c:p $(sed "s|\.[a-z]\+|.avif|g" <<< %c:p)<C-a><right><right><right><right><right><right><right><right><right>
nnoremap <space>cia :!convert %c:p $(sed "s|\.[a-z]\+|.avif|g" <<< %c:p)<cr>
vnoremap <space>cia :!for i in %f:p;do convert $i $(sed "s|\.[a-z]\+|.avif|g" <<< $i);done<cr>

nnoremap <space>ciW :!convert %c:p $(sed "s|\.[a-z]\+|.webp|g" <<< %c:p)<C-a><right><right><right><right><right><right><right><right><right>
nnoremap <space>ciw :!convert %c:p $(sed "s|\.[a-z]\+|.webp|g" <<< %c:p)<cr>
vnoremap <space>ciw :!for i in %f:p;do convert $i $(sed "s|\.[a-z]\+|.webp|g" <<< $i);done<cr>

nnoremap <space>ciJ :!convert %c:p $(sed "s|\.[a-z]\+|.jpg|g" <<< %c:p)<C-a><right><right><right><right><right><right><right><right><right>
nnoremap <space>cij :!convert %c:p $(sed "s|\.[a-z]\+|.jpg|g" <<< %c:p)<cr>
vnoremap <space>cij :!for i in %f:p;do convert $i $(sed "s|\.[a-z]\+|.jpg|g" <<< $i);done<cr>

nnoremap <space>ciP :!convert %c:p $(sed "s|\.[a-z]\+|.png|g" <<< %c:p)<C-a><right><right><right><right><right><right><right><right><right>
nnoremap <space>cip :!convert %c:p $(sed "s|\.[a-z]\+|.png|g" <<< %c:p)<cr>
vnoremap <space>cip :!for i in %f:p;do convert $i $(sed "s|\.[a-z]\+|.png|g" <<< $i);done<cr>


" Create
nnoremap ajs :touch .js<left><left><left>
nnoremap ajS :touch index.js<cr>
nnoremap ajsx :touch .jsx<left><left><left><left>
nnoremap ajsX :!cat ~/.config/vifm/templates/index.jsx >> %d/index.jsx & cat ~/.config/vifm/templates/.ComponentProps.d.ts >> %d/.ComponentProps.d.ts<cr>
nnoremap ajson :touch .json<left><left><left><left><left>
nnoremap ats :touch .ts<left><left><left>
nnoremap atS :touch index.ts<cr>
nnoremap atsx :touch .tsx<left><left><left><left><left>
nnoremap atsX :!cat ~/.config/vifm/templates/index.tsx >> %d/index.tsx<cr>
nnoremap adts :touch .d.ts<left><left><left><left><left>
nnoremap adtS :touch index.d.ts<cr>
nnoremap atxt :touch .txt<left><left><left><left>
nnoremap amd :touch .md<left><left><left>
nnoremap amD :touch README.md<left><left><left>
nnoremap acss :touch .css<left><left><left><left>
nnoremap acsS :touch style.css<cr>
nnoremap ascss :touch .scss<left><left><left><left><left>
nnoremap ascsS :touch style.scss<cr>

nnoremap rdij :!mkdir %c:r && mv ./%c %d/%c:r/index.js<cr>

nnoremap aa :touch<space>
nnoremap ad :mkdir<space>

highlight /^.*\.(jsx)$/ ctermfg=blue
highlight /^.*\.(tsx)$/ ctermfg=steelblue
highlight /^.*\.(css)$/ ctermfg=cyan
highlight /^.*\.(js|mjs|cjs)$/ ctermfg=yellow
highlight /^.*\.(ts)$/ ctermfg=blue
highlight /^.*\.(json)$/ ctermfg=khaki
highlight /^package.json$/ ctermfg=purple
highlight /^.*\.(txt)$/ ctermfg=white
highlight /^.*\.(md)$/ ctermfg=pink1
highlight /^\..*rc$/ ctermfg=magenta
highlight /^\..*ignore$/ ctermfg=darkred

